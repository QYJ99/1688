# -*- coding: utf-8 -*-from selenium import webdriverfrom selenium.webdriver import ChromeOptionsfrom configs.config import log"""主要对浏览器的配置及初始化"""class Browser:    def __init__(self):        self.driver = None        self.drivers = None    # 是否要显示浏览器界面的，True则不显示    def get_dirver(self,head=True):        if head:            self.driver = self.chrome()        else:            self.driver = self.chrome(False)    # 配置chrome的参数    def __chrome_browser(self,head):        #        caps =  {        "browserName": "chrome",        "version": "",        "platform": "ANY",            }        caps['loggingPrefs'] = {'performance': 'ALL'}        self.options = ChromeOptions()        self.options.add_experimental_option('w3c', False)        self.options.add_experimental_option("excludeSwitches", ["enable-automation"])        self.options.add_experimental_option('useAutomationExtension', False)        self.options.add_experimental_option("detach", True)        self.options.add_experimental_option('prefs', {            'credentials_enable_service': False,            'profile': {                'password_manager_enabled': False            }        })        if head:            self.options.add_argument('--headless')        self.options.add_argument('--window-position=100,100')        self.options.add_argument('--disable-blink-features=AutomationControlled')        #您的浏览器限制了第三方Cookie，这将影响您正常登录，您可以更改浏览器的隐私设置，解除限制后重试。        experimentalFlags = ['same-site-by-default-cookies@2', 'cookies-without-same-site-must-be-secure@2']        chromeLocalStatePrefs = {'browser.enabled_labs_experiments': experimentalFlags}        self.options.add_experimental_option('localState', chromeLocalStatePrefs)        self.options.add_argument("--disable-features=VizDisplayCompositor")        options = ['--dns-prefetch-disable', '--no-sandbox', '--disable-extensions', '--disable-background-networking',                   '--disable-background-timer-throttling', '--disable-breakpad', '--disable-browser-side-navigation',                   '--disable-client-side-phishing-detection', '--disable-default-apps',                   '--disable-features=site-per-process',                   '--disable-hang-monitor', '--disable-popup-blocking', '--disable-prompt-on-repost',                   '--disable-translate',                   '--metrics-recording-only', '--no-first-run', '--safebrowsing-disable-auto-update',                   '--password-store=basic',                   '--use-mock-keychain', '--mute-audio', 'about:blank']        for i in options:            self.options.add_argument(i)        return caps    # chrome初始化    def chrome(self,head=True):        caps = self.__chrome_browser(head)        self.driver: webdriver.Chrome = webdriver.Chrome(options=self.options, desired_capabilities=caps,) # executable_path= '/path/to/chromedriver'        # 设置网页超时时间为60秒        self.driver.set_page_load_timeout(60)        return self.driver# Browser()