# -*- coding: utf-8 -*-import jsonimport timeimport reimport requestsfrom spider.cookie import Cookiefrom configs.config import headres,proxies,logimport hashlibimport execjs# from utils.browser import Browser"""主要对参数的加密，加密成接口所需的参数"""class Encrypt():    def __init__(self,data,cookies=None):        self.data = data        self.headers = {            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',            'referer': 'https://s.1688.com/',            'accept': '*/*',            'accept-encoding': 'gzip, deflate, br',            'accept-language': 'zh-CN,zh;q=0.9',            'upgrade-insecure-requests': '1',            # 'cookie': '__wpkreporterwid_=fb6e4c79-58e9-4137-8f80-ffced1e2c4e3; showAgainTime=1; cna=F+paGYCr1h0CAXFE4Ga5zMyr; hng=CN%7Czh-CN%7CCNY%7C156; UM_distinctid=17cd05edd55870-023199d013efcd-57b193e-1fa400-17cd05edd564cf; cookie2=1dcb7cd6481bd577a974203a9dc3b0a0; t=e534905f5a86f57668706b883ab72605; _tb_token_=fa3ee1e8e3de3; __cn_logon__=false; ali_apache_id=11.26.226.62.1637660901543.551630.9; xlly_s=1; _csrf_token=1637664518257; CNZZDATA1256793290=827194461-1635578050-https%253A%252F%252Fwww.1688.com%252F%7C1637727271; _m_h5_tk=ccfd9a4d32bf21b64e5cde3b1cb3c1a2_1637746080887; _m_h5_tk_enc=9ae71b9b11b6c02d5ab096df13b50228; csg=c2d21ab0; lid=%E9%95%BF%E9%9A%86%E6%97%85%E6%B8%B8%E5%AE%98%E6%96%B9%E6%97%97%E8%88%B0%E5%BA%97%3A%E6%95%B0%E6%8D%AE; sn=%E9%95%BF%E9%9A%86%E6%97%85%E6%B8%B8%E5%AE%98%E6%96%B9%E6%97%97%E8%88%B0%E5%BA%97%3A%E6%95%B0%E6%8D%AE; unb=2212799927336; alicnweb=touch_tb_at%3D1637739910869; isg=BCoqipiTP3g-qrP04YrOgsF7e5DMm6714Hh4xrTjiX0I58ihnC7nBdFVcxN7FyaN; tfstk=c3phBjsIVB5CFbCMGv6BXQ8vRaNhaRePoLJ6QKJ3QGtHeDJdYsju_SW1ycbnl2P5.; l=eBgeVA_mgczd8HOkBOfZnurza779GIRVguPzaNbMiOCP_wWJ56CcW6BQoGKvCnGVnsPMR3uQQyaYBu8uZyUIhRtJruogwjb0ld8h.'        }        self.params = {            'jsv': '2.4.11',            'appKey': '12574478',            't': str(time.time() * 1000),            'sign': 'FAKE_SIGN_WITH_ANYTHING',            'api': 'mtop.1688.imageService.putImage',            'ecode': '0',            'v': '1.0',            'type': 'originaljson',            'dataType': 'jsonp',            '_bx-v': '1.1.20',            'data': self.data,        }        self.cookies = cookies    def get_token(self):        """从cookie获取token"""        # cookie = Cookie().get_cookie()        try:            cookie = open('./data/cookie.txt','r').read()        except:            cookie = open('.././data/cookie.txt', 'r').read()        token_with_time = re.findall('_m_h5_tk=(.*?);',cookie)[0]        enc_token = re.findall('_m_h5_tk_enc=(.*?);',cookie)[0]        self.cookies = {'_m_h5_tk': token_with_time, '_m_h5_tk_enc': enc_token}        return token_with_time,enc_token    def get_sign(self,token_with_time):        """        获取sign        :param token_with_time:        :return:        """        token = token_with_time.split('_')[0]        t2 = str(int(time.time() * 1000))        try:            with open('./js/1688.js', "r", encoding="utf-8") as f:                js_code = f.read()        except:            with open('.././js/1688.js', "r", encoding="utf-8") as f:                js_code = f.read()        ctx = execjs.compile(js_code)        u = ctx.call("u", self.data)        c = '&'.join([token, t2, '12574478', self.data])        m = hashlib.md5()        m.update(c.encode('utf-8'))        sign = m.hexdigest()        self.params.update({'t': t2, 'sign': sign})        # print(sign)        log.info('sign加密生成：{}'.format(sign))        return sign    def post_img_res(self):        """        从过接口上传图片及获取上传图片后内容        :return:        """        token_with_time, enc_token = self.get_token()        self.get_sign(token_with_time)        # print(token_with_time, enc_token, self.cookies)        url = 'https://h5api.m.1688.com/h5/mtop.1688.imageservice.putimage/1.0/?'        res = requests.post(url, data=self.params, headers=self.headers, cookies=self.cookies,proxies=proxies).text # proxies=proxies        log.info('提交图片返回内容完成')        return res    def upload_img(self):        """        对上传图片处理。1.判断cookie是否过期，过期则从新获取，        2.获取 imageId,requestId,sessionId 三个参数        :return:        """        res = self.post_img_res()        if '令牌过期' in res or 'imageId' not in res:            log.info('cookie过期，开始获取新的cookie')            Cookie().get_cookie()            res = self.post_img_res()        res_json = json.loads(res)        imageId = res_json['data']['imageId']        requestId = res_json['data']['requestId']        sessionId = res_json['data']['sessionId']        return imageId,requestId,sessionIddata = '{"imageBase64":"","appName":"searchImageUpload","appKey":"pvvljh1grxcmaay2vgpe9nb68gg9ueg2"}'res = Encrypt(data).post_img_res()print(res)